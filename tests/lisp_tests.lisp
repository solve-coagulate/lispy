(define run-test
  (lambda (name expr verbose)
    (if expr
        (progn (if verbose (print name (quote PASS)) nil) 0)
        (progn (print name (quote FAIL)) 1))))

(define verbose 1)

(define length
  (lambda (xs)
    (if (null? xs) 0 (+ 1 (length (cdr xs))))) )

(define sum
  (lambda (xs)
    (if (null? xs) 0 (+ (car xs) (sum (cdr xs))))) )

(define tests
  (list
    (run-test (quote addition) (= (+ 1 1) 2) verbose)
    (run-test (quote car) (= (car (list 1 2 3)) 1) verbose)
    (run-test (quote cdr) (= (cdr (list 1 2 3)) (list 2 3)) verbose)
    (run-test (quote cons) (= (cons 1 (list 2 3)) (list 1 2 3)) verbose)
    (run-test (quote lambda) (= ((lambda (x) (+ x 1)) 2) 3) verbose)
    (run-test (quote if) (= (if (> 2 1) 42 0) 42) verbose)
    (run-test (quote null) (null? (cdr (list 1))) verbose)
    (run-test (quote list?) (list? (list 1 2)) verbose)
    (run-test (quote quote) (= (quote (1 2 3)) (list 1 2 3)) verbose)
    (run-test
      (quote macro)
      (= (progn
           (defmacro when (test body)
             (list (quote if) test body nil))
           (when (> 2 1) 5))
         5)
      verbose)
    (run-test (quote define)
             (= (progn (define foo 5) foo) 5)
             verbose)
    (run-test (quote symbol?) (symbol? (quote foo)) verbose)
    (run-test (quote closure)
             (= (((lambda (x) (lambda () x)) 7)) 7)
             verbose)
    (run-test (quote recursion)
             (= (progn
                  (define fact (lambda (n) (if (= n 0) 1 (* n (fact (- n 1))))))
                  (fact 5))
                120)
             verbose)
    (run-test (quote progn) (= (progn 1 2 3) 3) verbose)
    (run-test (quote greater) (> 3 2) verbose)
    (run-test (quote subtraction-int) (= (- 5 3) 2) verbose)
    (run-test (quote multiplication-int) (= (* 3 4) 12) verbose)
    (run-test (quote division-int) (= (/ 8 2) 4) verbose)
    (run-test (quote subtraction-float) (= (- 5.0 2.5) 2.5) verbose)
    (run-test (quote multiplication-float) (= (* 2.5 2.0) 5.0) verbose)
    (run-test (quote division-float) (= (/ 5.0 2.0) 2.5) verbose)
    (run-test (quote less-int) (< 1 2) verbose)
    (run-test (quote lesseq-mixed) (<= 2 2.0) verbose)
    (run-test (quote greateq-float) (>= 3.5 2) verbose)
    (run-test (quote nested-list)
             (= (list (list 1 2) (list 3 4)) (quote ((1 2) (3 4))))
             verbose)
    (run-test (quote lambda-multi)
             (= ((lambda (x y) (+ x y)) 3 4) 7)
             verbose)
    (run-test (quote closure-multi)
             (= (((lambda (a b) (lambda (c) (+ (+ a b) c))) 1 2) 3) 6)
             verbose)
    (run-test (quote macroexpand-test)
             (= (progn
                  (defmacro twice (x) (list (quote +) x x))
                  (macroexpand (twice 5)))
                (quote (+ 5 5)))
             verbose)
    (run-test (quote error-undefined) (try bar) verbose)
    (run-test (quote error-wrong-arity) (try (+ 1)) verbose)
    (run-test (quote error-invalid) (try (if 1 2)) verbose)
    (run-test (quote progn-sequence)
             (= (progn (define seqvar 1)
                       (define seqvar (+ seqvar 1))
                       seqvar)
                2)
             verbose)
    (run-test (quote print-return) (= (print 99) nil) verbose)
    ))

(define total (length tests))
(define failures (sum tests))

(print total (quote tests) (quote run)
      (- total failures) (quote passed) failures (quote failed))
(if (= failures 0) 0 1)
